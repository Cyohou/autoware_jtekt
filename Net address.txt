2️⃣ GNSS Twist Passthrough（后半段开始）
目标：让 GNSS/INS 速度直接进入 /localization/twist_estimator/twist_with_covariance，供 EKF 使用。

现状：

该话题原本由 gyro_odometer 发布，数据源是车轮速+IMU。

改造：

在 gyro_odometer_core.hpp 加入：

gnss_twist_passthrough.enable / gnss_twist_passthrough.input_topic 参数

gnss_odom_sub_ 订阅器

callbackGnssOdom 回调

在 gyro_odometer_core.cpp：

构造函数读取参数并订阅 GNSS odometry

回调中提取 twist，封装成 TwistWithCovarianceStamped，发布到现有输出话题，并更新缓存

修改 launch 文件，新增 <arg> 和 <param> 控制开关和输入话题。

编译问题：

链接时报 undefined reference，原因是用到了 nav_msgs::msg::Odometry 却没在 CMakeLists.txt / package.xml 声明依赖。

解决：find_package(nav_msgs REQUIRED) + ament_target_dependencies(... nav_msgs)，并在 package.xml 加 <depend>nav_msgs</depend>。

3️⃣ 运行与验证 GNSS Twist
节点名确认：/localization/twist_estimator/gyro_odometer。

参数检查：ros2 param get ... gnss_twist_passthrough.enable 返回 true，说明开关生效。

数据对比：

GNSS odometry linear.x 与 /localization/twist_estimator/twist_with_covariance 基本一致，说明线速度直通成功。

角速度差异大 → 原因是 IMU 回调频率高，会覆盖 GNSS 回调的角速度。

改进建议：

GNSS-only 模式下屏蔽 IMU 回调对 twist_with_covariance 的发布，避免覆盖。

4️⃣ EKF 输出为 0 的排查
现象：

/localization/twist_estimator/twist_with_covariance 有值

/localization/pose_twist_fusion_filter/twist 全是 0

原因分析：

EKF 启动文件的 input_pose_with_cov_name / input_twist_with_cov_name 默认是占位符 in_pose_with_covariance / in_twist_with_covariance，没有 remap 到真实话题。

结果 EKF 根本没订阅到你的 GNSS/IMU 速度输入。

解决：

在 EKF 启动文件中显式 remap：

xml
<arg name="input_pose_with_cov_name" default="/localization/pose_estimator/pose_with_covariance"/>
<arg name="input_twist_with_cov_name" default="/localization/twist_estimator/twist_with_covariance"/>
确认 EKF 收到数据后，速度输出就会恢复正常。

5️⃣ 今天的关键收获
GNSS pose passthrough 已打通并验证。

GNSS twist passthrough 线速度已打通，角速度需屏蔽 IMU 覆盖才能完全直通。

EKF 输出为 0 的根本原因是 输入话题 remap 错误，不是 GNSS passthrough 本身的问题。

编译时新增消息类型必须在 CMake 和 package.xml 声明依赖，否则会链接失败。
