1️⃣ GNSS Pose Passthrough（讨论最多）
背景：你想让 GNSS/INS 的位姿直接进入 /localization/pose_estimator/pose_with_covariance，供 EKF 使用。

问题发现：

原 ndt_scan_matcher.launch.xml 用了 $(arg …)，Galactic XML 不支持，导致 substitution 报错。

你原本写的 GNSS pose passthrough 参数没传到 Autoware 真正运行的节点，因为上层是通过 <include> 调用官方 launch。

解决方案：

采用 方案 B：直接在官方 ndt_scan_matcher.launch.xml 的 <node> 内硬加三行 <param>。

保留 $(var …) 语法，确保 Galactic 能解析。

确认上层 include 的是你改过的文件，并重新 build。

验证结果：

重新编译后，ros2 param get /localization/pose_estimator/ndt_scan_matcher gnss_pose_passthrough.enable 返回 true。

说明 GNSS pose passthrough 已经生效，可以直接发布 GNSS 位姿到 EKF。

2️⃣ GNSS Twist Passthrough（讨论较少）
目标：让 GNSS/INS 的速度信息直接进入 /localization/twist_estimator/twist_with_covariance，供 EKF 使用。

现状分析：

该话题目前由 /localization/twist_estimator/gyro_odometer 发布，数据源是车轮速 + IMU。

EKF 正在订阅它。

方案选择：

你选择在 gyro_odometer 内新增 GNSS twist passthrough 回调（订阅 /sensing/gnss/ins/odometry，提取 twist，封装成 TwistWithCovarianceStamped 并发布）。

改造内容：

修改 gyro_odometer_core.hpp：新增参数、订阅器、回调声明。

修改 gyro_odometer_core.cpp：构造函数读取参数并创建 GNSS odometry 订阅，callbackGnssOdom 实现 GNSS twist 发布并更新内部缓存。

修改 launch 文件：新增 <arg> 和 <param> 控制 GNSS passthrough 开关和输入话题。

验证准备：

还需确认节点真实名字（可能是 /localization/twist_estimator/gyro_odometer），用 ros2 node list 查找后再验证参数和话题。

3️⃣ 最终目标
Pose链路： GNSS → /localization/pose_estimator/pose_with_covariance → EKF （已打通并验证）

Twist链路： GNSS → /localization/twist_estimator/twist_with_covariance → EKF （代码和 launch 已改好，待验证）
